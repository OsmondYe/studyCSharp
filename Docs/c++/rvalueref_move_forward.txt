# 传统a=b
	把b的内容复制给a，b同时保持不变
	问题：
		- b是10g的字符串，开销很大，而且确定b不再使用了，如何优化？
	基因：
		- 编译器对于避免复制，一无所知
	解决：
		- 为无需数据复制的场景，设计一个新的数据类型 -> 右值引用

# 右值引用， 专为解决函数返回值优化
	# 右值所引用的是不久就会被释放的空间在
	# 右值一旦有了名字,就不是右值,而是左值

# 右值可以理解成没有名字引用的存储空间，一般情况下是由编译器生成的代码来管理的
	# 平凡类型好理解
	# 类类型的话，de-ctor还是会参与	

# 狭义右值与广义右值
	#编译器自己生成的没有名字索引的空间，-> 狭义右值 pure rval
	#左值强制转换成右值   -> 广义右值
		# 这种情况的右值不一定会立即销毁

# type&& 定义右值引用
	//依据形参是左值还是右值分别进行重载
	void process (cosnt Widget& lvalArg);	// 处理左值
	void process (Widget&& rvalArg);		// 处理右值

# move-ctor, move assignment operator


# rval的引用变量是左值
	# 能看到名字,就匹配左值版本的,

# std::move 强制转换为右值
	在类的构造上给编译器暗示,绑上右值引用类型的函数(move-cotr, move-assign)
	返回右值引用
	{
		template<typename T> inline void swap(T&a, T&b){
			T tmp=move(a);  // 移动构造
			a=move(b);      // 移动赋值
			b=move(tmp);
		}
	}
	其实是语义上强制转换，而不是移动
	配合类成员函数接收type&& x的形式，确保x是被移入的
		移动构造函数 string(string&& s){}

# 完美转发 std::forward
	# 处理引用消除的问题 
		T && && &i  -> T&  i
		T && && &&i -> T&& i
    有条件的语义上类型转换
	// 本质上所有函数形参都是左值，否则要名字干什么
	考虑嵌套的情况
		void outer(Widget&& ttt){
			process (ttt);
		}
