# 双机调试
	- 主机需要去设置 物理COM口的传输率为 115200
	- windbg中,使用   \\.\pipe\com_1

#keyword{
	VPB 	Volume Parameter Block 
	IRP     Io request package
	URP
}

#Knowledge {
	- 外设会暴露他的寄存器,通过读写寄存器来控制外设
	- IO端口与IO内存
	- 把设备寄存器和设备内存统统映射到物理内存上
	- 把用到的数据接口写在函数的开始, 这是驱动的开发习惯
}

#snip{
	ASSERT(NT_SUCCESS(status));
}

#问题{
	- 扩展build, 在其结束之后, 把生成的文件拷贝到制定目录
		需要学习如何扩展微软的nmake 
		新增,编译成功后 自动copy的事宜, 不动手,许多东西都白做
	- 通过nmake 把编译生成的文件自动送到共享folder里面
	# 编译 {
		- build会调用nmake工具去解析makefile,进行编译
		- 使用build 进行构建
			E:\>set | findstr /i NTMAKEENV
				NTMAKEENV=C:\WinDDK\7600.16385.1\bin
	}
}

#Log{
	# 第一个蓝屏{
		2020/12/25
		系统线程异常未处理	
	}
}

#INF {
	# 注册表指令{
			HKLM, HKCR, HKCU, HKU, HKR[当前相对建]
		[Classinstall32]  : HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Class
		[InterfaceInstall32]:
		HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\DeviceClass\GUID

		# AddReg  进行注册表写操作
			根键，[子键],[键值名],[Flags],[键值]
		# DelReg

	}
	# 文件操作指令{
		# CopyFile
			CopyFile=@文件名 
		# DelFile
		# RenFiles
			new_name, old_name
	}

	# 服务指令 {
		; 所有服务都保存在 HKLM\System\CurrentControlSet\Services
		# AddService
	}

	# Version{
	  Signature="$WindowsNT$"  ;只能是这个
	}

	# 厂商 {
		[厂商,产品,设备]
	}


	# 问题{
		注册表里面的
			设备类， 设备还分类？
			接口类，
	}
}

#标识符号链接字符串{
	- kernel  	\??\
	- user 		\\.\
}

#Status code{
	STATUS_INVALID_DEVICE_REQUEST
	STATUS_INSUFFICIENT_RESOURCES  ;    // 各种系统资源创建识别时
	STATUS_TIMEOUT;  		IoCancelIRP
}



#IRQL{
	# {
		KIRQL irql;
		irql = KeAcquireQueuedSpinLock( LockQueueIoDatabaseLock );
		//
		KeReleaseQueuedSpinLock( LockQueueIoDatabaseLock, irql );
	}
}

#IRP {
	
	# based on Packet-driven{
		header (fixed part)  			: IRP
		body (in each driver layer)		: IO_STACK_LOCATION
	}

	# PIO_STACK_LOCATION {
		和其关系紧密相连
		os或者驱动创建IRP的同时，就会创建与之相关联的IO_STACK_LOCATON
	}
	# {
		CurrentLocation
		StackCount
	}

	# 转发{
		pdx->NextStackDevice = IoAttachDeviceToDeviceStack(fdo, PhysicalDeviceObject);
		IoCallDriver(pdx->NextStackDevice, Irp);
	}

	# 向下转发{
		IoSkipCurrentIrpStackLocation
		IoCopyCurrentIrpStackLocationToNext
		IoAllocateIrp
		IoSetCompletionRoutine
		IoCallDriver
		IoMarkIrpPending
		IoStartPacket

		# passThrough{
			IoSkipCurrentIrpStackLocation (Irp);
   			status = IoCallDriver (deviceExtension->NextLowerDriver, Irp);
   			return status;
   			# 因为移除了当前栈，当整个Irp在系统里传递完成后，不会寻找当前栈的完成历程，也就不会通知其
   			# 单纯直通，既不想改变参数，也不想考虑完成历程，
		}
		# 完成时得到基本通知{
			IoCopyCurrentIrpStackLocationToNext(Irp);
			IoSetCompletionRoutine   // 底层完成时会得到一个通知
			IoCallDriver
			// 因为底层可能{同步|异步}完成， 情况不同
		}
	}

	# MasterIrp & AssociatedIrp {
		if (Irp->Flags & IRP_ASSOCIATED_IRP)
		{
			masterIrp = Irp->AssociatedIrp.MasterIrp;
		}
	
	}

	#{
		Irp->CurrentLocation <= (CCHAR) (Irp->StackCount + 1);
	} 

	# IoGetCurrentIrpStackLocation {	return Irp->Tail.Overlay.CurrentStackLocation;	}

	# IoMarkIrpPending {
		常用异步任务处理中
		IoGetCurrentIrpStackLocation( (Irp) )->Control |= SL_PENDING_RETURNED
	} 

	# IoCompleteRequest{
		# driver 已经结束了所有的IRP处理， 先返回给IO_Mgr
	}

	# IoSetCancleRoutine{
		# IoCancelIrp
		# IoAcquireCancelSpinLock / IoReleaseCancelSpinLock
	}

	# IoStartPacket{
		串行化来处理IRP
		要求驱动注册： StartIOT
	}
}

#同步 {
	Event {
		2 type， Notification， Synchronization
		storyage必须是常驻的， non-paged

		NotificationEvent : 等待一个IO完成， 手动重置
		SynchronizationEvent ： 自动重置

	}
	FastMutex{
		提高IRQL到APC
	}
}

#中断{
	# IoConnectInterrupt
	ISR  	->    Interrupt service routine {
		# 把ISR的IRQL提升到DIRQL  -> KeSynchronizeExecution ，
			利用其完成不被打断
	}
	# 中断时间不应太长，多余的工作放DPC中

	# ISR把DPC插入到一个内部队列中， 当优先级降下来时， 抽空此队列

	# KeInitializedDPC, IoRequestDPC
}

#Kernel notify app events{
	
}

#MDL{
	# 内存描述符
	# virtual_address
	# IRP{
		totalLength = MmGetMdlByteCount(Irp->MdlAddress);
		virtualAddress = (ULONG_PTR) MmGetMdlVirtualAddress(Irp->MdlAddress);
	}
	# IO {
		IoAllocateMdl   // 根据虚拟地址分配MDL
		IoBuildPartialMdl  //
	}
}

#IO操作常见套路（可以写本书）{

	# IO_REMOVE_LOCK {

	}

	# 异步IO{
		# 责任委托
		# 注册完成历程，
	}
	# 通信 {
		CreateFile + DeviceIoControl
	}
}

#PNP {
	# Class Installer
	# Class/Miniclass Driver
	# fdoData->NextLowerDriver = IoAttachDeviceToDeviceStack (deviceObject,
                                                       PhysicalDeviceObject){
        if(NULL == fdoData->NextLowerDriver) {

        IoDeleteDevice(deviceObject);
        return STATUS_NO_SUCH_DEVICE;
    }
                                                       }
}

#Device{
	#设备类{
		比如 USB设备， 可以用来做键盘，鼠标，摄像头，蓝牙，打印机，U盘存储
		USB是底层总线的总类， 还需要通过功能类进行区分， 
		当然也可以给功能类提供通用的处理驱动
	}
	#设备接口类{
	Device Interface Class 
	通过此来导出设备和驱动的功能给其它组件
	}
	#driver stack  &   {
		miniport
		host controller
		hub 
		generic parent
	}
}

#电源{
	# 待整理{
		# 系统有wake up, sleep, 此时需要考虑如何给设备断电
		# 总线驱动负责最终的物理和电气情况的改变,比如上电多少之类, Fun Filt之类的驱动, 要下发Power
		# 分sys电,设备电, 
		# 设备上下电

	}
	# 系统电,设备电{
		# PoSetPowerState{
			通知下系统,设备的电源状态改变了
		}
	}
	# 记录设备上电状态,有电,能工作的,才能处理功能型IRP

	#IRP_MN_WAIT_WAKE {
		# waking a device or waking the system
		# 
	}
	#DO_POWER_INRUSH & DO_POWER_PAGABLE {
		#我们在AddDevice中创建DeviceObject时,需要考虑电源特性
	}	
}



#USB{
	# 待整理{
		reset_pipe, 
		reset_device (get_port_status, reset_parent_port)
		get_config_descriptor
	}
	
	#urb{
		#USB request blocks (URB) {
			-驱动发往host controller driver的数据块
		}
	}
	#pipe { }
	#endpoint

	# usb and 文件对象{
		fileObject = irpStack->FileObject;
		// 体现硬件驱动就是针对文件的操作?
	}

	# {
		SELECT_CONFIGURATION   SELECT_INTERFACE

		st USBD_INTERFACE_INFORMATION {
			st USBD_PIPE_INFORMATION
		}

		USBD_SHORT_TRANSFER_OK
		USBD_TRANSFER_DIRECTION_IN			// read
		USBD_TRANSFER_DIRECTION_OUT			// write
	}

	# API{
		UsbBuildInterruptOrBulkTransferRequest
	}

	# USB 描述{
		设备请求
		设备描述
		配置描述
		接口描述
		端点描述
	}

	# BULK读写{
		-1构造URB通过UsbBuildInterruptOrBulkTransferRequest
		-2切换当前IRP处理,改为: IRP_MJ_INTERNAL_DEVICE_CONTROL{
			nextStack = IoGetNextIrpStackLocation(Irp);
    		nextStack->MajorFunction = IRP_MJ_INTERNAL_DEVICE_CONTROL;
    		nextStack->Parameters.Others.Argument1 = (PVOID) urb;
    		nextStack->Parameters.DeviceIoControl.IoControlCode = 
                                             IOCTL_INTERNAL_USB_SUBMIT_URB;
		}
		-3准备好完成回调 IoSetCompletionRoutine;
		-4设置当前IRP为Pending,  IoMarkIrpPending(Irp);
		-5转发2步骤构造的新的IRPIoCallDriver(	
							deviceExtension->TopOfStackDeviceObject,
                            Irp) {
            可能的错误处理: if((ntStatus != STATUS_CANCELLED) && 
           (ntStatus != STATUS_DEVICE_NOT_CONNECTED))
        }
        -6返回Pending

        -在回调通知里,我看到了连续读写
	}

	#ResetPipe{
		#提交URB_FUNCTION_RESET_PIPE给下层设备
		-1 构造URB{
			urb = ExAllocatePool(NonPagedPool,sizeof(struct _URB_PIPE_REQUEST));
			urb->UrbHeader.Length = (USHORT) sizeof(struct _URB_PIPE_REQUEST);
            urb->UrbHeader.Function = URB_FUNCTION_RESET_PIPE;
            urb->UrbPipeRequest.PipeHandle = PipeInfo->PipeHandle;
		}
		-2 call下层driver{
			ntStatus = CallUSBD(DeviceObject, urb);
	        ExFreePool(urb);
	        -CallUSBD是自己封装的,原理是{
	        	- 准备好通知事件,KeInitializeEvent(&event, NotificationEvent, FALSE);
	        	- 构造IOCTL_INTERNAL_USB_SUBMIT_URB类型的IRP通过IoBuildDeviceIoControlRequest
	        	- ntStatus = IoCallDriver(deviceExtension->TopOfStackDeviceObject, irp);
	        	- 如果是ntStatus == STATUS_PENDING, 等事件有信号
	        			KeWaitForSingleObject(&event, 
                              Executive, 
                              KernelMode, 
                              FALSE, 
                              NULL);
	        }
		}

	}

}

#PCI{
	# hardware resouce mapping
	# interrupt handling
	# DPC handling
	# Scatter Gather DMA
	# Full fledged power management
	# flag/level based event tracing
	# boot-time event tracing

	# PCIBusInterface{
		# 通过IoBuildSynchronousFsdRequest创建IRP{
			IRP_MJ_PNP + IRP_MN_QUERY_INTERFACE
			参数为: GUID_BUS_INTERFACE_STANDARD

			# 发给下层设备对象实现
		}
		# 系统结构体 BUS_INTERFACE_STANDARD{
			# 当我们需要访问设备指定的{
				配置空间
				DMA控制器
			}

		}
	}
	# GetDeviceInfSettings{
		通过调用IoOpenDeviceRegistryKey, ZwQueryValueKey 来实现
	}
}


